title("Movie Co-Production Chord Diagram",
cex.main = 1.8, font.main = 2, col.main = "darkblue")
#Add a legend without a border
legend("topright", legend = names(country_colors),  # Country names
fill = country_colors,  # Corresponding colors
cex = 1.2,  # Adjust text size
title = "Country Colors", title.col = "darkblue",
bty = "n")  # ðŸ”¹ Remove legend border
library(circlize)
library(dplyr)
# Prepare the dataset for the chord diagram
df_chord <- df_pairs %>%
select(from, to, weight) %>%
rename(source = from, target = to, value = weight)  # Standardize column names
# Define custom country colors
country_colors <- c("US" = "blue", "FR" = "orange", "DE" = "green",
"GB" = "red", "ES" = "purple", "IT" = "brown",
"JP" = "pink", "BR" = "gray", "TR" = "yellow",
"IN" = "cyan")
# Create the chord diagram
chordDiagram(df_chord,
transparency = 0.4,  # Slight transparency for better readability
grid.col = country_colors,  # Assign custom colors to countries
annotationTrack = "grid",  # Show country labels
preAllocateTracks = list(track.height = 0.1))  # Reserve space for labels
# Add title with improved formatting
title("Movie Co-Production Chord Diagram",
cex.main = 1.8, font.main = 2, col.main = "darkblue")
#Add a legend without a border
legend("topright", legend = names(country_colors),  # Country names
fill = country_colors,  # Corresponding colors
cex = 0.8,  # Adjust text size
title = "Country Colors", title.col = "darkblue",
bty = "n")  # ðŸ”¹ Remove legend border
library(circlize)
library(dplyr)
# Prepare the dataset for the chord diagram
df_chord <- df_pairs %>%
select(from, to, weight) %>%
rename(source = from, target = to, value = weight)  # Standardize column names
# Define custom country colors
country_colors <- c("US" = "blue", "FR" = "orange", "DE" = "green",
"GB" = "red", "ES" = "purple", "IT" = "brown",
"JP" = "pink", "BR" = "gray", "TR" = "yellow",
"IN" = "cyan")
# Create the chord diagram
chordDiagram(df_chord,
transparency = 0.4,  # Slight transparency for better readability
grid.col = country_colors,  # Assign custom colors to countries
annotationTrack = "grid",  # Show country labels
preAllocateTracks = list(track.height = 0.1))  # Reserve space for labels
# Add title with improved formatting
title("Movie Co-Production Chord Diagram",
cex.main = 1.8, font.main = 1.8, col.main = "darkblue")
#Add a legend without a border
legend("topright", legend = names(country_colors),  # Country names
fill = country_colors,  # Corresponding colors
cex = 0.8,  # Adjust text size
title = "Country Colors", title.col = "darkblue",
bty = "n")  # Remove legend border
library(circlize)
library(dplyr)
# Prepare the dataset for the chord diagram
df_chord <- df_pairs %>%
select(from, to, weight) %>%
rename(source = from, target = to, value = weight)  # Standardize column names
# Define custom country colors
country_colors <- c("US" = "blue", "FR" = "orange", "DE" = "green",
"GB" = "red", "ES" = "purple", "IT" = "brown",
"JP" = "pink", "BR" = "gray", "TR" = "yellow",
"IN" = "cyan")
# Create the chord diagram
chordDiagram(df_chord,
transparency = 0.4,  # Slight transparency for better readability
grid.col = country_colors,  # Assign custom colors to countries
annotationTrack = "grid",  # Show country labels
preAllocateTracks = list(track.height = 0.1))  # Reserve space for labels
# Add title with improved formatting
title("Movie Co-Production Chord Diagram",
cex.main = 1.8, font.main = 1.5, col.main = "darkblue")
#Add a legend without a border
legend("topright", legend = names(country_colors),  # Country names
fill = country_colors,  # Corresponding colors
cex = 0.8,  # Adjust text size
title = "Country Colors", title.col = "darkblue",
bty = "n")  # Remove legend border
library(circlize)
library(dplyr)
# Prepare the dataset for the chord diagram
df_chord <- df_pairs %>%
select(from, to, weight) %>%
rename(source = from, target = to, value = weight)  # Standardize column names
# Define custom country colors
country_colors <- c("US" = "blue", "FR" = "orange", "DE" = "green",
"GB" = "red", "ES" = "purple", "IT" = "brown",
"JP" = "pink", "BR" = "gray", "TR" = "yellow",
"IN" = "cyan")
# Create the chord diagram
chordDiagram(df_chord,
transparency = 0.4,  # Slight transparency for better readability
grid.col = country_colors,  # Assign custom colors to countries
annotationTrack = "grid",  # Show country labels
preAllocateTracks = list(track.height = 0.1))  # Reserve space for labels
# Add title with improved formatting
title("Movie Co-Production Chord Diagram",
cex.main = 1.5, font.main = 1.5, col.main = "darkblue")
#Add a legend without a border
legend("topright", legend = names(country_colors),  # Country names
fill = country_colors,  # Corresponding colors
cex = 0.8,  # Adjust text size
title = "Country Colors", title.col = "darkblue",
bty = "n")  # Remove legend border
library(circlize)
library(dplyr)
# Prepare the dataset for the chord diagram
df_chord <- df_pairs %>%
select(from, to, weight) %>%
rename(source = from, target = to, value = weight)  # Standardize column names
# Define custom country colors
country_colors <- c("US" = "blue", "FR" = "orange", "DE" = "green",
"GB" = "red", "ES" = "purple", "IT" = "brown",
"JP" = "pink", "BR" = "gray", "TR" = "yellow",
"IN" = "cyan")
# Create the chord diagram
chordDiagram(df_chord,
transparency = 0.4,  # Slight transparency for better readability
grid.col = country_colors,  # Assign custom colors to countries
annotationTrack = "grid",  # Show country labels
preAllocateTracks = list(track.height = 0.1))  # Reserve space for labels
# Add title with improved formatting
title("Movie Co-Production Chord Diagram",
cex.main = 1.5, font.main = 1.5, col.main = "darkblue")
#Add a legend without a border
legend("topright", legend = names(country_colors),  # Country names
fill = country_colors,  # Corresponding colors
cex = 0.8,  # Adjust text size
title = "Country Colors", title.col = "darkblue",
bty = "n", # Remove legend border
inset = c(0, -0.1),  # ðŸ”½ Move the legend slightly down
y.intersp = 1.2)  # ðŸ”½ Increase spacing between items
library(circlize)
library(dplyr)
# Prepare the dataset for the chord diagram
df_chord <- df_pairs %>%
select(from, to, weight) %>%
rename(source = from, target = to, value = weight)  # Standardize column names
# Define custom country colors
country_colors <- c("US" = "blue", "FR" = "orange", "DE" = "green",
"GB" = "red", "ES" = "purple", "IT" = "brown",
"JP" = "pink", "BR" = "gray", "TR" = "yellow",
"IN" = "cyan")
# Create the chord diagram
chordDiagram(df_chord,
transparency = 0.4,  # Slight transparency for better readability
grid.col = country_colors,  # Assign custom colors to countries
annotationTrack = "grid",  # Show country labels
preAllocateTracks = list(track.height = 0.1))  # Reserve space for labels
# Add title with improved formatting
title("Movie Co-Production Chord Diagram",
cex.main = 1.5, font.main = 1.5, col.main = "darkblue")
#Add a legend without a border
legend("topright", legend = names(country_colors),  # Country names
fill = country_colors,  # Corresponding colors
cex = 0.8,  # Adjust text size
title = "Country Colors", title.col = "darkblue",
bty = "n", # Remove legend border
inset = c(0, -0.3),  # ðŸ”½ Move the legend slightly down
y.intersp = 1.3)  # ðŸ”½ Increase spacing between items
library(circlize)
library(dplyr)
# Prepare the dataset for the chord diagram
df_chord <- df_pairs %>%
select(from, to, weight) %>%
rename(source = from, target = to, value = weight)  # Standardize column names
# Define custom country colors
country_colors <- c("US" = "blue", "FR" = "orange", "DE" = "green",
"GB" = "red", "ES" = "purple", "IT" = "brown",
"JP" = "pink", "BR" = "gray", "TR" = "yellow",
"IN" = "cyan")
# Create the chord diagram
chordDiagram(df_chord,
transparency = 0.4,  # Slight transparency for better readability
grid.col = country_colors,  # Assign custom colors to countries
annotationTrack = "grid",  # Show country labels
preAllocateTracks = list(track.height = 0.1))  # Reserve space for labels
# Add title with improved formatting
title("Movie Co-Production Chord Diagram",
cex.main = 1.5, font.main = 1.5, col.main = "darkblue")
#Add a legend without a border
legend("topright", legend = names(country_colors),  # Country names
fill = country_colors,  # Corresponding colors
cex = 0.8,  # Adjust text size
title = "Country Colors", title.col = "darkblue",
bty = "n", # Remove legend border
inset = c(0, -0.8),  # ðŸ”½ Move the legend slightly down
y.intersp = 0.8)  # ðŸ”½ Increase spacing between items
library(circlize)
library(dplyr)
# Prepare the dataset for the chord diagram
df_chord <- df_pairs %>%
select(from, to, weight) %>%
rename(source = from, target = to, value = weight)  # Standardize column names
# Define custom country colors
country_colors <- c("US" = "blue", "FR" = "orange", "DE" = "green",
"GB" = "red", "ES" = "purple", "IT" = "brown",
"JP" = "pink", "BR" = "gray", "TR" = "yellow",
"IN" = "cyan")
# Create the chord diagram
chordDiagram(df_chord,
transparency = 0.4,  # Slight transparency for better readability
grid.col = country_colors,  # Assign custom colors to countries
annotationTrack = "grid",  # Show country labels
preAllocateTracks = list(track.height = 0.1))  # Reserve space for labels
# Add title with improved formatting
title("Movie Co-Production Chord Diagram",
cex.main = 1.5, font.main = 1.5, col.main = "darkblue")
#Add a legend without a border
legend("topright", legend = names(country_colors),  # Country names
fill = country_colors,  # Corresponding colors
cex = 0.8,  # Adjust text size
title = "Country Colors", title.col = "darkblue",
bty = "n", # Remove legend border
inset = c(0, -0.8),  # ðŸ”½ Move the legend slightly down
y.intersp = 0.3)  # ðŸ”½ Increase spacing between items
library(circlize)
library(dplyr)
# Prepare the dataset for the chord diagram
df_chord <- df_pairs %>%
select(from, to, weight) %>%
rename(source = from, target = to, value = weight)  # Standardize column names
# Define custom country colors
country_colors <- c("US" = "blue", "FR" = "orange", "DE" = "green",
"GB" = "red", "ES" = "purple", "IT" = "brown",
"JP" = "pink", "BR" = "gray", "TR" = "yellow",
"IN" = "cyan")
# Create the chord diagram
chordDiagram(df_chord,
transparency = 0.4,  # Slight transparency for better readability
grid.col = country_colors,  # Assign custom colors to countries
annotationTrack = "grid",  # Show country labels
preAllocateTracks = list(track.height = 0.1))  # Reserve space for labels
# Add title with improved formatting
title("Movie Co-Production Chord Diagram",
cex.main = 1.5, font.main = 1.5, col.main = "darkblue")
#Add a legend without a border
legend("topright", legend = names(country_colors),  # Country names
fill = country_colors,  # Corresponding colors
cex = 0.8,  # Adjust text size
title = "Country Colors", title.col = "darkblue",
bty = "n", # Remove legend border
inset = c(0, -1.8),  # ðŸ”½ Move the legend slightly down
y.intersp = 0.3)  # ðŸ”½ Increase spacing between items
library(circlize)
library(dplyr)
# Prepare the dataset for the chord diagram
df_chord <- df_pairs %>%
select(from, to, weight) %>%
rename(source = from, target = to, value = weight)  # Standardize column names
# Define custom country colors
country_colors <- c("US" = "blue", "FR" = "orange", "DE" = "green",
"GB" = "red", "ES" = "purple", "IT" = "brown",
"JP" = "pink", "BR" = "gray", "TR" = "yellow",
"IN" = "cyan")
# Create the chord diagram
chordDiagram(df_chord,
transparency = 0.4,  # Slight transparency for better readability
grid.col = country_colors,  # Assign custom colors to countries
annotationTrack = "grid",  # Show country labels
preAllocateTracks = list(track.height = 0.1))  # Reserve space for labels
# Add title with improved formatting
title("Movie Co-Production Chord Diagram",
cex.main = 1.5, font.main = 1.5, col.main = "darkblue")
#Add a legend without a border
legend("topright", legend = names(country_colors),  # Country names
fill = country_colors,  # Corresponding colors
cex = 0.8,  # Adjust text size
title = "Country Colors", title.col = "darkblue",
bty = "n", # Remove legend border
inset = c(0, -1.3),  # ðŸ”½ Move the legend slightly down
y.intersp = 0.3)  # ðŸ”½ Increase spacing between items
library(circlize)
library(dplyr)
# Prepare the dataset for the chord diagram
df_chord <- df_pairs %>%
select(from, to, weight) %>%
rename(source = from, target = to, value = weight)  # Standardize column names
# Define custom country colors
country_colors <- c("US" = "blue", "FR" = "orange", "DE" = "green",
"GB" = "red", "ES" = "purple", "IT" = "brown",
"JP" = "pink", "BR" = "gray", "TR" = "yellow",
"IN" = "cyan")
# Create the chord diagram
chordDiagram(df_chord,
transparency = 0.4,  # Slight transparency for better readability
grid.col = country_colors,  # Assign custom colors to countries
annotationTrack = "grid",  # Show country labels
preAllocateTracks = list(track.height = 0.1))  # Reserve space for labels
# Add title with improved formatting
title("Movie Co-Production Chord Diagram",
cex.main = 1.5, font.main = 1.5, col.main = "darkblue")
#Add a legend without a border
legend("topright", legend = names(country_colors),  # Country names
fill = country_colors,  # Corresponding colors
cex = 0.8,  # Adjust text size
title = "Country Colors", title.col = "darkblue",
bty = "n", # Remove legend border
inset = c(0, -0.3),  # ðŸ”½ Move the legend slightly down
y.intersp = 1.3)  # ðŸ”½ Increase spacing between items
library(circlize)
library(dplyr)
# Prepare the dataset for the chord diagram
df_chord <- df_pairs %>%
select(from, to, weight) %>%
rename(source = from, target = to, value = weight)  # Standardize column names
# Define custom country colors
country_colors <- c("US" = "blue", "FR" = "orange", "DE" = "green",
"GB" = "red", "ES" = "purple", "IT" = "brown",
"JP" = "pink", "BR" = "gray", "TR" = "yellow",
"IN" = "cyan")
# Create the chord diagram
chordDiagram(df_chord,
transparency = 0.4,  # Slight transparency for better readability
grid.col = country_colors,  # Assign custom colors to countries
annotationTrack = "grid",  # Show country labels
preAllocateTracks = list(track.height = 0.1))  # Reserve space for labels
# Add title with improved formatting
title("Movie Co-Production Chord Diagram",
cex.main = 1.5, font.main = 1.5, col.main = "darkblue")
#Add a legend without a border
legend("topright", legend = names(country_colors),  # Country names
fill = country_colors,  # Corresponding colors
cex = 0.8,  # Adjust text size
title = "Country Colors", title.col = "darkblue",
bty = "n", # Remove legend border
inset = c(0, -0.8),  # ðŸ”½ Move the legend slightly down
y.intersp = 1.3)  # ðŸ”½ Increase spacing between items
library(circlize)
library(dplyr)
# Prepare the dataset for the chord diagram
df_chord <- df_pairs %>%
select(from, to, weight) %>%
rename(source = from, target = to, value = weight)  # Standardize column names
# Define custom country colors
country_colors <- c("US" = "blue", "FR" = "orange", "DE" = "green",
"GB" = "red", "ES" = "purple", "IT" = "brown",
"JP" = "pink", "BR" = "gray", "TR" = "yellow",
"IN" = "cyan")
# Create the chord diagram
chordDiagram(df_chord,
transparency = 0.4,  # Slight transparency for better readability
grid.col = country_colors,  # Assign custom colors to countries
annotationTrack = "grid",  # Show country labels
preAllocateTracks = list(track.height = 0.1))  # Reserve space for labels
# Add title with improved formatting
title("Movie Co-Production Chord Diagram",
cex.main = 1.5, font.main = 1.5, col.main = "darkblue")
#Add a legend without a border
legend("topright", legend = names(country_colors),  # Country names
fill = country_colors,  # Corresponding colors
cex = 0.8,  # Adjust text size
title = "Country Colors", title.col = "darkblue",
bty = "n", # Remove legend border
inset = c(0.5, -0.3),  # ðŸ”½ Move the legend slightly down
y.intersp = 1.3)  # ðŸ”½ Increase spacing between items
library(circlize)
library(dplyr)
# Prepare the dataset for the chord diagram
df_chord <- df_pairs %>%
select(from, to, weight) %>%
rename(source = from, target = to, value = weight)  # Standardize column names
# Define custom country colors
country_colors <- c("US" = "blue", "FR" = "orange", "DE" = "green",
"GB" = "red", "ES" = "purple", "IT" = "brown",
"JP" = "pink", "BR" = "gray", "TR" = "yellow",
"IN" = "cyan")
# Create the chord diagram
chordDiagram(df_chord,
transparency = 0.4,  # Slight transparency for better readability
grid.col = country_colors,  # Assign custom colors to countries
annotationTrack = "grid",  # Show country labels
preAllocateTracks = list(track.height = 0.1))  # Reserve space for labels
# Add title with improved formatting
title("Movie Co-Production Chord Diagram",
cex.main = 1.5, font.main = 1.5, col.main = "darkblue")
#Add a legend without a border
legend("topright", legend = names(country_colors),  # Country names
fill = country_colors,  # Corresponding colors
cex = 0.8,  # Adjust text size
title = "Country Colors", title.col = "darkblue",
bty = "n", # Remove legend border
inset = c(1.5, -0.3),  # ðŸ”½ Move the legend slightly down
y.intersp = 1.3)  # ðŸ”½ Increase spacing between items
library(circlize)
library(dplyr)
# Prepare the dataset for the chord diagram
df_chord <- df_pairs %>%
select(from, to, weight) %>%
rename(source = from, target = to, value = weight)  # Standardize column names
# Define custom country colors
country_colors <- c("US" = "blue", "FR" = "orange", "DE" = "green",
"GB" = "red", "ES" = "purple", "IT" = "brown",
"JP" = "pink", "BR" = "gray", "TR" = "yellow",
"IN" = "cyan")
# Create the chord diagram
chordDiagram(df_chord,
transparency = 0.4,  # Slight transparency for better readability
grid.col = country_colors,  # Assign custom colors to countries
annotationTrack = "grid",  # Show country labels
preAllocateTracks = list(track.height = 0.1))  # Reserve space for labels
# Add title with improved formatting
title("Movie Co-Production Chord Diagram",
cex.main = 1.5, font.main = 1.5, col.main = "darkblue")
#Add a legend without a border
legend("topright", legend = names(country_colors),  # Country names
fill = country_colors,  # Corresponding colors
cex = 0.8,  # Adjust text size
title = "Country Colors", title.col = "darkblue",
bty = "n", # Remove legend border
inset = c(1, -0.3),  # ðŸ”½ Move the legend slightly down
y.intersp = 1.3)  # ðŸ”½ Increase spacing between items
library(circlize)
library(dplyr)
# Prepare the dataset for the chord diagram
df_chord <- df_pairs %>%
select(from, to, weight) %>%
rename(source = from, target = to, value = weight)  # Standardize column names
# Define custom country colors
country_colors <- c("US" = "blue", "FR" = "orange", "DE" = "green",
"GB" = "red", "ES" = "purple", "IT" = "brown",
"JP" = "pink", "BR" = "gray", "TR" = "yellow",
"IN" = "cyan")
# Create the chord diagram
chordDiagram(df_chord,
transparency = 0.4,  # Slight transparency for better readability
grid.col = country_colors,  # Assign custom colors to countries
annotationTrack = "grid",  # Show country labels
preAllocateTracks = list(track.height = 0.1))  # Reserve space for labels
# Add title with improved formatting
title("Movie Co-Production Chord Diagram",
cex.main = 1.5, font.main = 1.5, col.main = "darkblue")
#Add a legend without a border
legend("topright", legend = names(country_colors),  # Country names
fill = country_colors,  # Corresponding colors
cex = 0.8,  # Adjust text size
title = "Country Colors", title.col = "darkblue",
bty = "n", # Remove legend border
inset = c(0, -0.1),  # ðŸ”½ Move the legend slightly down
y.intersp = 1.3)  # ðŸ”½ Increase spacing between items
#Add a legend without a border
legend("topright", legend = names(country_colors),  # Country names
fill = country_colors,  # Corresponding colors
cex = 0.8,  # Adjust text size
title = "Country Colors", title.col = "darkblue",
bty = "n", # Remove legend border
inset = c(0, -0.09),  # ðŸ”½ Move the legend slightly down
y.intersp = 1.3)  # ðŸ”½ Increase spacing between items
library(circlize)
library(dplyr)
# Prepare the dataset for the chord diagram
df_chord <- df_pairs %>%
select(from, to, weight) %>%
rename(source = from, target = to, value = weight)  # Standardize column names
# Define custom country colors
country_colors <- c("US" = "blue", "FR" = "orange", "DE" = "green",
"GB" = "red", "ES" = "purple", "IT" = "brown",
"JP" = "pink", "BR" = "gray", "TR" = "yellow",
"IN" = "cyan")
# Create the chord diagram
chordDiagram(df_chord,
transparency = 0.4,  # Slight transparency for better readability
grid.col = country_colors,  # Assign custom colors to countries
annotationTrack = "grid",  # Show country labels
preAllocateTracks = list(track.height = 0.1))  # Reserve space for labels
# Add title with improved formatting
title("Movie Co-Production Chord Diagram",
cex.main = 1.5, font.main = 1.5, col.main = "darkblue")
#Add a legend without a border
legend("topright", legend = names(country_colors),  # Country names
fill = country_colors,  # Corresponding colors
cex = 0.8,  # Adjust text size
title = "Country Colors", title.col = "darkblue",
bty = "n", # Remove legend border
inset = c(0, -0.09),  # ðŸ”½ Move the legend slightly down
y.intersp = 1.3)  # ðŸ”½ Increase spacing between items
library(circlize)
library(dplyr)
# Prepare the dataset for the chord diagram
df_chord <- df_pairs %>%
select(from, to, weight) %>%
rename(source = from, target = to, value = weight)  # Standardize column names
# Define custom country colors
country_colors <- c("US" = "blue", "FR" = "orange", "DE" = "green",
"GB" = "red", "ES" = "purple", "IT" = "brown",
"JP" = "pink", "BR" = "gray", "TR" = "yellow",
"IN" = "cyan")
# Create the chord diagram
chordDiagram(df_chord,
transparency = 0.4,  # Slight transparency for better readability
grid.col = country_colors,  # Assign custom colors to countries
annotationTrack = "grid",  # Show country labels
preAllocateTracks = list(track.height = 0.1))  # Reserve space for labels
# Add title with improved formatting
title("Movie Co-Production Chord Diagram",
cex.main = 1.5, font.main = 1.5, col.main = "darkblue")
#Add a legend without a border
legend("topright", legend = names(country_colors),  # Country names
fill = country_colors,  # Corresponding colors
cex = 0.8,  # Adjust text size
title = "Country Colors", title.col = "darkblue",
bty = "n", # Remove legend border
inset = c(0, -0.05),  # ðŸ”½ Move the legend slightly down
y.intersp = 1.3)  # ðŸ”½ Increase spacing between items
