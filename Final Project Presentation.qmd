---
title: "üé¨ Movies Popularity Presentation üçø"
author: "Aurora Sterpellone, Ekin Kizildas"
format: 
  revealjs:
      scrollable: true
      embed-resources: true
      theme: solarized
editor: visual
---

```{r}
library(tidyverse)
library(tidytext)  
library(ggwordcloud)  
library(dplyr)  
library(ggplot2)
library(stopwords)
library(igraph)
library(ggraph)
library(scales)
library(networkD3)
library(stats)
library(highcharter)
library(tidyr)
library(RColorBrewer)
library(readr)
library(circlize)
```

```{r}

final_data <- read_csv("final_data.csv")

```

```{r, echo = FALSE}

grouped_data <- final_data %>%
  group_by(title) %>%
  summarise(
    movie_id = first(movie_id),
    release_year = first(release_year),
    popularity = mean(popularity, na.rm = TRUE),
    poster_path = first(poster_path),
    language = first(language),
    country = toString(unique(country)),  # Combine unique countries
    release_date = toString(unique(release_date)),  # Combine unique release dates
    academy_award = max(academy_award),
    academy_nominated = max(academy_nominated),
    palme_dor = max(palme_dor),
    golden_lion = max(golden_lion)
  ) %>%
  ungroup()

# Filter the top 10 most popular movies
top_10_movies <- grouped_data %>%
  arrange(desc(popularity)) %>%
  head(10)

```

## Objective

![ ](i-used-to-watch-a-lot-of-movies-kartik-aaryan.gif)

---

## ABOUT SCRAPING AND CODES‚Ä¶

![](Screenshot 2025-03-26 at 2.32.42‚ÄØPM.png)

![](Screenshot 2025-03-26 at 2.34.12‚ÄØPM.png)

------------------------------------------------------------------------

## Movie Distribution by Country üó∫

```{r}
# 2. Movie Distribution by Country (Top 10 countries producing the most movies)
top_countries <-final_data %>%
  count(country, sort = TRUE) %>%
  top_n(10, n)

ggplot(top_countries, aes(x = reorder(country, n), y = n)) +
  geom_bar(stat = "identity", fill = "purple", alpha = 0.7) +
  coord_flip() +
  labs(title = "Top 10 Countries Producing the Most Movies", x = "Country", y = "Movie Count") +
  theme_minimal() +
  theme(
    plot.background = element_rect(fill = "#fbf3e4", color = NA),
    panel.background = element_rect(fill = "#fbf3e4", color = "#fbf3e4")
  )

```

------------------------------------------------------------------------

## Titles' Words Cloud Ô∏èüñçÔ∏è

```{r}
word_data <- final_data %>%
  filter(!is.na(title)) %>%
  unnest_tokens(word, title) %>%
  count(word, sort = TRUE) %>%
  filter(n > 5)  # Keep words appearing more than 5 times

# Remove stop words (English and other common words)
word_data <- word_data %>%
  filter(!word %in% stopwords("en"))  # Remove common English stop words

# Improved Word Cloud
ggplot(word_data, aes(label = word, size = n, color = n)) +
  geom_text_wordcloud(area_corr = TRUE) +
  scale_color_viridis_c() +
  labs(title = "Most Common Words in Movie Titles ") +
  theme_minimal() +
  theme(
    plot.background = element_rect(fill = "#fbf3e4", color = NA),
    panel.background = element_rect(fill = "#fbf3e4", color = "#fbf3e4")
  )

```

------------------------------------------------------------------------

## Number of Movies by Year üé¨

```{r}
# 1. Number of Movies by Year
ggplot(final_data, aes(x = as.factor(release_year))) +
  geom_bar(fill = "purple", alpha = 0.7) +
  labs(title = "Number of Movies by Year", x = "Release Year", y = "Movie Count") +
  theme_minimal() +
  theme(
    plot.background = element_rect(fill = "#fbf3e4", color = NA),
    panel.background = element_rect(fill = "#fbf3e4", color = "#fbf3e4"),
    axis.text.x = element_text(angle = 45, hjust = 1)
  )
  

```

------------------------------------------------------------------------

## Popularity Distribution üèÜ

```{r}
# 3. Popularity Distribution
ggplot(final_data, aes(x = popularity)) +
  geom_histogram(bins = 20, fill = "purple", alpha = 0.7) +
  labs(title = "Popularity Distribution", x = "Popularity", y = "Movie Count") +
  theme_minimal() +
  theme(
    plot.background = element_rect(fill = "#fbf3e4", color = NA),
    panel.background = element_rect(fill = "#fbf3e4", color = "#fbf3e4")
  )

```

------------------------------------------------------------------------

## Popularity by release year üé•

```{r}
# Calculate average popularity by release year
popularity_by_year <- grouped_data %>%
  group_by(release_year) %>%
  summarise(avg_popularity = mean(popularity, na.rm = TRUE))

# Create a line chart
highchart() %>%
  hc_chart(type = 'line') %>%
  hc_xAxis(title = list(text = "Release Year"), categories = popularity_by_year$release_year) %>%
  hc_add_series(name = "Average Popularity", data = popularity_by_year$avg_popularity, color = "#8856a7") %>%
  hc_title(text = "Average Movie Popularity by Release Year") %>%
  hc_subtitle(text = "Trends in Movie Popularity Over Time")


```

------------------------------------------------------------------------

## Popularity & Awards üåü

```{r}
# Calculate total awards
final_data <- final_data %>%
  mutate(total_awards = academy_award + academy_nominated + palme_dor + golden_lion)

# Scatter plot
ggplot(final_data, aes(x = popularity, y = total_awards)) +
  geom_point(alpha = 0.6, color = "purple") +
  geom_smooth(method = "lm", color = "red", se = FALSE) +  # Regression line
  labs(title = "Popularity vs. Awards", x = "Popularity", y = "Total Awards") +
  theme_minimal() +
  theme(
    plot.background = element_rect(fill = "#fbf3e4", color = NA),
    panel.background = element_rect(fill = "#fbf3e4", color = "#fbf3e4")
  )

```

------------------------------------------------------------------------

```{r, echo = FALSE}
df_pairs <- final_data %>%
  select(title, country) %>%  
  group_by(title) %>%
  summarise(country_pairs = if (n_distinct(country) > 1) {
    list(combn(unique(country), 2, simplify = FALSE))
  } else {
    list(NULL)
  }) %>%
  unnest(country_pairs) %>%
  filter(!is.null(country_pairs)) %>%
  unnest_wider(country_pairs, names_sep = "_") %>%
  rename(from = country_pairs_1, to = country_pairs_2) %>%
  count(from, to, name = "weight")

country_graph <- graph_from_data_frame(df_pairs, directed = FALSE)

```

## Movies Co-Production ü§ù

```{r}
# Set background color
par(bg = "#fbf3e4") 

# Prepare the dataset for the chord diagram
df_chord <- df_pairs %>%
  select(from, to, weight) %>%
  rename(source = from, target = to, value = weight)  # Standardize column names

# Define custom country colors
country_colors <- c("US" = "blue", "FR" = "orange", "DE" = "green",
                    "GB" = "red", "ES" = "purple", "IT" = "brown",
                    "JP" = "pink", "BR" = "gray", "TR" = "yellow",
                    "IN" = "cyan")

# Create the chord diagram
chordDiagram(df_chord, 
             transparency = 0.4,  # Slight transparency for better readability
             grid.col = country_colors,  # Assign custom colors to countries
             annotationTrack = "grid",  # Show country labels
             preAllocateTracks = list(track.height = 0.1))  # Reserve space for labels

# Add title with improved formatting
title("Movie Co-Production Chord Diagram", 
      cex.main = 1.5, font.main = 1.5, col.main = "darkblue")

 #Add a legend without a border
legend("topright", legend = names(country_colors),  # Country names
       fill = country_colors,  # Corresponding colors
       cex = 0.8,  # Adjust text size
       title = "Country Colors", title.col = "darkblue",
       bty = "n", # Remove legend border
       inset = c(0, -0.05),  # üîΩ Move the legend slightly down
       y.intersp = 1.3)  # üîΩ Increase spacing between items

```

------------------------------------------------------------------------

```{r, echo = FALSE}

grouped_data <- final_data %>%
  group_by(title) %>%
  summarise(
    movie_id = first(movie_id),
    release_year = first(release_year),
    popularity = mean(popularity, na.rm = TRUE),
    poster_path = first(poster_path),
    language = first(language),
    country = toString(unique(country)),  # Combine unique countries
    release_date = toString(unique(release_date)),  # Combine unique release dates
    academy_award = max(academy_award),
    academy_nominated = max(academy_nominated),
    palme_dor = max(palme_dor),
    golden_lion = max(golden_lion)
  ) %>%
  ungroup()

# Filter the top 10 most popular movies
top_10_movies <- grouped_data %>%
  arrange(desc(popularity)) %>%
  head(10)

```

## Awards Distribution

### Awards Distribution for All Movies üçø

```{r}
# Create a bar plot to show the distribution of different awards won by movies
awards_distribution <- final_data %>%
  select(academy_award, academy_nominated, palme_dor, golden_lion) %>%
  summarise_all(sum) %>%
  pivot_longer(cols = everything(), names_to = "Award", values_to = "Count")

highchart() %>%
  hc_chart(type = 'column') %>%
  hc_xAxis(categories = awards_distribution$Award) %>%
  hc_add_series(name = "Awards Count", data = awards_distribution$Count, color = "#1c9099") %>%
  hc_title(text = "Awards Distribution") %>%
  hc_subtitle(text = "All movies")
```

------------------------------------------------------------------------

### Awards Distribution for Top 10 Most Popular Movies üçø

```{r}
# Create a bar plot to show the distribution of different awards won by movies
awards_distribution <- top_10_movies %>%
  select(academy_award, academy_nominated, palme_dor, golden_lion) %>%
  summarise_all(sum) %>%
  pivot_longer(cols = everything(), names_to = "Award", values_to = "Count")

highchart() %>%
  hc_chart(type = 'column') %>%
  hc_xAxis(categories = awards_distribution$Award) %>%
  hc_add_series(name = "Awards Count", data = awards_distribution$Count, color = "#8856a7") %>%
  hc_title(text = "Awards Distribution") %>%
  hc_subtitle(text = "Top 10 Most Popular Movies")

```

------------------------------------------------------------------------

## Top Movies by Popularity üéûÔ∏è

```{r}
# Create a bar plot to highlight the top 10 movies by popularity and show their awards
highchart() %>%
  hc_chart(type = 'column') %>%
  hc_xAxis(categories = top_10_movies$title) %>%
  hc_add_series(name = "Popularity", data = top_10_movies$popularity, color = "#dd1c77") %>%
  hc_add_series(name = "Academy Award", data = top_10_movies$academy_award, type = 'line', color = "darkgreen") %>%
  hc_add_series(name = "Academy Nominated", data = top_10_movies$academy_nominated, type = 'line', color = "#31a354") %>%
  hc_add_series(name = "Palme D'Or", data = top_10_movies$palme_dor, type = 'line', color = "#a1d99b") %>%
  hc_add_series(name = "Golden Lion", data = top_10_movies$golden_lion, type = 'line', color = "#e5f5e0") %>%
  hc_title(text = "Top Movies by Popularity and Awards") %>%
  hc_subtitle(text = "Highlighting Awards Won")

```

------------------------------------------------------------------------

# THANK YOU!üéñÔ∏è

![Martin Scorsese](thank-you-martin-scorsese.gif)
